package handlers

import (
	"crypto/sha256"
	"encoding/json"
	"fmt"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/websocket/v2"
	"github.com/google/uuid"
	"github.com/kabenari/webrtc/pkg/chat"
	w "github.com/kabenari/webrtc/pkg/webrtc"
	"github.com/pion/webrtc/v3"
	"os"
	"time"
)

type websocketMessage struct {
	Event string `json:"event"`
	Data  string `json:"data"`
}

func RoomCreate(c *fiber.Ctx) error {
	roomUUID := uuid.New().String()
	_, _, _, _ = createOrGetRoom(roomUUID)
	return c.JSON(fiber.Map{
		"roomId":  roomUUID,
		"roomUrl": fmt.Sprintf("/room/%s", roomUUID),
	})
}

func Room(c *fiber.Ctx) error {
	uuid := c.Params("uuid")
	if uuid == "" {
		c.Status(404)
		return nil
	}
	ws := "ws"
	if os.Getenv("ENV") == "PROD" {
		ws = "wss"
	}
	uuid, suuid, _, roomExists := createOrGetRoom(uuid)
	if !roomExists {

	}
	return c.JSON(fiber.Map{
		"roomWebSocketAddr":   fmt.Sprintf("%s://%s/room/%s/websocket", ws, c.Hostname(), uuid),
		"chatWebSocketAddr":   fmt.Sprintf("%s://%s/room/%s/chat/websocket", ws, c.Hostname(), uuid),
		"viewerWebSocketAddr": fmt.Sprintf("%s://%s/room/%s/viewer/websocket", ws, c.Hostname(), uuid),
		"streamLink":          fmt.Sprintf("%s://%s/stream/%s", c.Protocol(), c.Hostname(), suuid),
	})
}

func RoomWebsocket(c *websocket.Conn) {
	// 1. Get Room
	uuid := c.Params("uuid")
	if uuid == "" {
		return
	}

	w.RoomsLock.RLock()
	room, ok := w.Rooms[uuid]
	w.RoomsLock.RUnlock()
	if !ok {
		return
	}

	// 2. Create MediaEngine and PeerConnection
	// The settings here can be customized.
	mediaEngine := webrtc.MediaEngine{}
	// Add codecs here if needed, e.g., mediaEngine.RegisterDefaultCodecs()
	api := webrtc.NewAPI(webrtc.WithMediaEngine(&mediaEngine))
	peerConnection, err := api.NewPeerConnection(webrtc.Configuration{})
	if err != nil {
		return
	}

	// 3. Create a new PeerConnectionState for the new peer.
	// This uses the structs defined in your webrtc package.
	p := w.PeerConnectionState{
		PeerConnection: peerConnection,
		Websocket:      &w.ThreadSafeWriter{Conn: c}, //
	}

	// 4. Add the new peer to the room's connection list.
	// This appends the state to the Connections slice in the Peers struct.
	room.Peers.ListLock.Lock()
	room.Peers.Connections = append(room.Peers.Connections, p) //
	room.Peers.ListLock.Unlock()

	// 5. Set up PeerConnection event handlers

	// When a new ICE candidate is generated by Pion, send it to the client.
	peerConnection.OnICECandidate(func(candidate *webrtc.ICECandidate) {
		if candidate == nil {
			return
		}
		candidateString, err := json.Marshal(candidate.ToJSON())
		if err != nil {
			return
		}

		// Send the ICE candidate to the client
		if writeErr := p.Websocket.WriteJSON(&websocketMessage{
			Event: "ice-candidate", // The client will be listening for this event
			Data:  string(candidateString),
		}); writeErr != nil {
			// Handle error
		}
	})

	// When a remote track is received from the client, add it to the room.
	peerConnection.OnTrack(func(track *webrtc.TrackRemote, receiver *webrtc.RTPReceiver) {
		// AddTrack will create a new local track for the room and then call
		// SignalPeerConnections to notify all other peers.
		trackLocal := room.Peers.AddTrack(track) //
		if trackLocal == nil {
			return
		}
		defer room.Peers.RemoveTrack(trackLocal) //

		buf := make([]byte, 1500)
		for {
			i, _, readErr := track.Read(buf)
			if readErr != nil {
				return
			}
			if _, writeErr := trackLocal.Write(buf[:i]); writeErr != nil {
				return
			}
		}
	})

	// When the connection state changes, log it.
	peerConnection.OnConnectionStateChange(func(state webrtc.PeerConnectionState) {
		// You can handle disconnection logic here
		if state == webrtc.PeerConnectionStateFailed || state == webrtc.PeerConnectionStateClosed {
			// This will trigger a cleanup in SignalPeerConnections
			room.Peers.SignalPeerConnections()
		}
	})

	// 6. Signal all peers to sync and establish connections.
	// This will send an "offer" to the newly connected client.
	room.Peers.SignalPeerConnections()

	// 7. The main message loop for handling messages from THIS client
	var msg websocketMessage
	for {
		if err := c.ReadJSON(&msg); err != nil {
			return // Exit loop on error (client disconnected)
		}

		// The client will send back answers and its own ICE candidates.
		switch msg.Event {
		case "answer":
			var answer webrtc.SessionDescription
			if err := json.Unmarshal([]byte(msg.Data), &answer); err != nil {
				continue
			}
			if err := peerConnection.SetRemoteDescription(answer); err != nil {
				// Handle error
			}

		case "ice-candidate":
			var candidate webrtc.ICECandidateInit
			if err := json.Unmarshal([]byte(msg.Data), &candidate); err != nil {
				continue
			}
			if err := peerConnection.AddICECandidate(candidate); err != nil {
				// Handle error
			}
		}
	}
}

//the code is a crucial helper method designed to either **create a new room** or **retrieve an
//existing one**. It ensures that a room is available and properly initialized before any operations
//(such as WebSocket connections) can be carried out for that room. Below is a thorough breakdown of
//this method, including all processes and concepts involved.

func createOrGetRoom(uuid string) (string, string, *w.Room, bool) {
	w.RoomsLock.Lock()
	defer w.RoomsLock.Unlock()
	h := sha256.New()
	h.Write([]byte(uuid))
	suuid := fmt.Sprintf("%x", h.Sum(nil))

	if room, ok := w.Rooms[uuid]; ok {
		// Room exists
		if _, ok := w.Streams[suuid]; !ok {
			w.Streams[suuid] = room
		}
		return uuid, suuid, room, true
	}
	hub := chat.NewHub()
	p := &w.Peers{}
	p.TrackLocals = make(map[string]*webrtc.TrackLocalStaticRTP)
	room := &w.Room{
		Peers: p,
		Hub:   hub,
	}
	w.Rooms[uuid] = room
	w.Streams[suuid] = room
	go hub.Run()
	return uuid, suuid, room, false
}

// - Handles WebSocket connections for viewers in a room.
func RoomViewerWebsocket(c *websocket.Conn) {
	uuid := c.Params("uuid")
	if uuid == "" {
		return
	}
	w.RoomsLock.Lock()
	if peer, ok := w.Rooms[uuid]; ok {
		w.RoomsLock.Unlock()
		RoomViewerConn(c, peer.Peers)
		return
	}
	w.RoomsLock.Unlock()
}

//- **Purpose**: Periodically sends the number of active connections to the viewer via WebSocket.
//1. Creates a 1-second ticker.
//2. On each tick:
//	- Writes the current number of active peers (`len(p.Connections)`) to the WebSocket.
//	- Stops when the connection closes.

func RoomViewerConn(c *websocket.Conn, p *w.Peers) {
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()
	defer c.Close()

	for {
		select {
		case <-ticker.C:
			w, err := c.Conn.NextWriter(websocket.TextMessage)
			if err != nil {
				return
			}
			w.Write([]byte(fmt.Sprintf("%d", len(p.Connections))))
		}
	}
}
